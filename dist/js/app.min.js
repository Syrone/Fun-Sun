/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
document.addEventListener('DOMContentLoaded', function () {
  var tooltipHeaderList = [].slice.call(document.querySelectorAll('[data-bs-tooltip="tooltip"]'));
  var tooltipHeader = tooltipHeaderList.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl);
  });
  var tooltipHeaderListLight = [].slice.call(document.querySelectorAll('[data-bs-tooltip="tooltip-light"]'));
  var tooltipHeaderLight = tooltipHeaderListLight.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl, {
      customClass: 'tooltip-light'
    });
  });

  /** (Start) Адаптивная высота таблицы **/
  var tableElements = document.querySelectorAll('.table-fullscreen');
  var tabTableElements = document.querySelectorAll('.tab-table-fullscreen');
  var navLinksTable = document.querySelectorAll('.nav-link-table');
  function calculateTableHeight() {
    var windowWidth = window.innerWidth;
    var windowHeight = window.innerHeight;
    var calculateHeight = function calculateHeight(tableElement) {
      var tableOffsetTop = tableElement.getBoundingClientRect().top;
      var wrapPagination = document.querySelector('.wrapper-pagination');
      var paginationHeight = wrapPagination ? wrapPagination.offsetHeight : 0;
      var tableHeight = windowHeight - tableOffsetTop - paginationHeight - 10;
      if (windowWidth >= 992 && windowHeight >= 768) {
        tableElement.style.maxHeight = tableHeight + 'px';
      } else {
        tableElement.style.maxHeight = '';
      }
    };
    tableElements.forEach(function (tableElement) {
      calculateHeight(tableElement);
    });
    var tabTableElements = document.querySelectorAll('.tab-pane-table');
    if (tabTableElements.length > 0) {
      tabTableElements.forEach(function (tabTableElement) {
        var tableElement = tabTableElement.querySelector('.tab-table-fullscreen');
        var wrapPagination = tabTableElement.querySelector('.wrapper-pagination');
        var paginationHeight = wrapPagination ? wrapPagination.offsetHeight : 0;
        var tableOffsetTop = tableElement.getBoundingClientRect().top;
        var tableHeight = windowHeight - tableOffsetTop - paginationHeight - 10;
        if (windowWidth >= 992 && windowHeight >= 768) {
          tableElement.style.maxHeight = tableHeight + 'px';
        } else {
          tableElement.style.maxHeight = '';
        }
      });
    }
  }
  function closeDropdownMenus() {
    var dropdownCellButtons = document.querySelectorAll('.table-wrapper tbody .cell-button.is-active');
    dropdownCellButtons.forEach(function (dropdownCellButton) {
      dropdownCellButton.classList.remove('is-active');
    });
    var dropdownButtons = document.querySelectorAll('.table-wrapper tbody .dropdown-toggle');
    dropdownButtons.forEach(function (dropdownButton) {
      dropdownButton.classList.remove('show');
      dropdownButton.setAttribute('aria-expanded', 'false');
    });
    var dropdownMenus = document.querySelectorAll('.table-wrapper tbody .dropdown-menu.show');
    dropdownMenus.forEach(function (dropdownMenu) {
      dropdownMenu.classList.remove('show');
    });
  }
  function handleScroll(event) {
    var tableElement = event.target;
    var scrollTop = tableElement.scrollTop;
    var scrollThreshold = 2;
    var isScrollingDown;
    if (scrollTop > scrollThreshold && !isScrollingDown) {
      tableElement.classList.add('scroll');
      isScrollingDown = true;
    } else if (scrollTop <= scrollThreshold && isScrollingDown) {
      tableElement.classList.remove('scroll');
      isScrollingDown = false;
    } else if (scrollTop === 0) {
      tableElement.classList.remove('scroll');
      isScrollingDown = false;
    }
    calculateTableHeight();
    closeDropdownMenus();
  }
  function handleResize() {
    if (window.innerWidth >= 992) {
      tableElements.forEach(function (tableElement) {
        tableElement.addEventListener('scroll', handleScroll);
      });
    } else {
      tableElements.forEach(function (tableElement) {
        tableElement.removeEventListener('scroll', handleScroll);
      });
    }
    closeDropdownMenus();
  }
  window.addEventListener('load', function () {
    calculateTableHeight();
    handleResize();
  });
  window.addEventListener('resize', function () {
    calculateTableHeight();
    handleResize();
  });
  navLinksTable.forEach(function (navLinkTable) {
    navLinkTable.addEventListener('hidden.bs.tab', function () {
      calculateTableHeight();
    });
    navLinkTable.addEventListener('shown.bs.tab', function () {
      navLinkTable.addEventListener('transitionend', function () {
        calculateTableHeight();
      });
    });
  });
  var observerTabTableHeight = new MutationObserver(function (mutationsList, observer) {
    calculateTableHeight();
  });
  tabTableElements.forEach(function (tabTableElement) {
    tabTableElement.addEventListener('scroll', handleScroll);
    observerTabTableHeight.observe(tabTableElement, {
      childList: true,
      subtree: true
    });
  });
  /** (End) Адаптивная высота таблицы **/

  //** (Start) Backdrop for Header Menu Mobile **/
  var showBackdropBtn = document.querySelector('.btn-backdrop');
  var backdrop = null;
  showBackdropBtn.addEventListener('click', function () {
    if (backdrop) {
      backdrop.remove();
      backdrop = null;
    } else {
      backdrop = document.createElement('div');
      backdrop.classList.add('modal-backdrop');
      document.querySelector('.header').appendChild(backdrop);
    }
  });
  document.addEventListener('click', function (event) {
    var backdropModal = document.querySelector(".modal-backdrop");
    var backdrop = null;

    // Проверяем, был ли клик по backdrop
    if (event.target === backdropModal) {
      backdropModal.remove();
      backdrop = null;
    }
    var navbar = document.getElementById("headerMenu");
    var target = event.target;

    // Проверяем, является ли кликнутый элемент частью меню
    var isNavbar = navbar.contains(target);

    // Если кликнули вне меню и меню открыто, закрываем его
    if (!isNavbar && navbar.classList.contains("show")) {
      var toggle = document.querySelector("[data-bs-toggle='collapse']");
      toggle.click();
    }
  });
  //** (End) Backdrop for Header Menu Mobile **/

  //** (Start) Swiper Buttons **//
  var swiperButtons = new Swiper('.swiper-buttons', {
    slidesPerView: 'auto',
    spaceBetween: 8,
    freeMode: true
  });
  var swiperButtonsTab = new Swiper('.swiper-buttons-tab', {
    slidesPerView: 'auto',
    spaceBetween: 8,
    freeMode: true,
    slideToClickedSlide: true
  });
  //** (End) Swiper Buttons **//

  //** (Start) Close Buttons Dropdown **//
  var dropdownFilters = document.querySelectorAll('.dropdown-filter');
  dropdownFilters.forEach(function (dropdownFilter) {
    var dropdownNested = dropdownFilter.querySelectorAll('.dropdown-nested');
    dropdownNested.forEach(function (nested) {
      var dropdownMenu = nested.querySelector('.dropdown-menu');
      var observer = new MutationObserver(function (mutations) {
        var hasOpenMenu = false;
        dropdownNested.forEach(function (nested) {
          var dropdownMenu = nested.querySelector('.dropdown-menu');
          if (dropdownMenu.classList.contains('show')) {
            hasOpenMenu = true;
          }
        });
        if (hasOpenMenu) {
          dropdownFilter.classList.add('nested');
        } else {
          dropdownFilter.classList.remove('nested');
        }
      });
      observer.observe(dropdownMenu, {
        attributes: true
      });
    });
  });
  //** (End) Close Buttons Dropdown **//

  //** (Start) Close Buttons Dropdown Nested **//
  var closeDropdownButtons = document.getElementsByClassName('dropdown-dissmis');
  for (var i = 0; i < closeDropdownButtons.length; i++) {
    closeDropdownButtons[i].addEventListener('click', function () {
      var dropdownMenu = this.parentNode.parentNode.parentNode;
      var dropdownToggle = dropdownMenu.parentNode.querySelector('.dropdown-toggle');
      dropdownMenu.classList.remove('show');
      dropdownToggle.classList.remove('show');
      dropdownToggle.setAttribute('aria-expanded', 'false');
    });
  }
  //** (End) Close Buttons Dropdown Nested **//

  //** (Start) Checked From Check **//
  var checkboxes = document.querySelectorAll('.form-check-input');
  var formChecks = document.querySelectorAll('.form-check');
  checkboxes.forEach(function (checkbox, index) {
    if (!checkbox.classList.contains('is-radio')) {
      checkbox.addEventListener('change', function () {
        if (this.checked) {
          formChecks[index].classList.add('checked');
        } else {
          formChecks[index].classList.remove('checked');
        }
      });
    }
  });
  //** (End) Checked From Check **//

  // Получаем значение переменной цвета из CSS
  var rootStyles = getComputedStyle(document.documentElement);
  var colors = {
    accent: rootStyles.getPropertyValue('--accent'),
    secondary: rootStyles.getPropertyValue('--secondary')
  };

  //** (Start) Graph Without Scales **//
  var canvasTrendingUp = document.getElementById('canvasTrendingUp');
  var canvasTrendingDown = document.getElementById('canvasTrendingDown');
  if (canvasTrendingUp) {
    var GraphTrendingUp = new Chart(canvasTrendingUp, {
      type: 'line',
      data: {
        labels: ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница'],
        datasets: [{
          label: 'Продажи',
          data: [25, 5, 20, 0, 30],
          backgroundColor: 'rgba(0, 0, 0, 0)',
          borderColor: colors.secondary,
          tension: .45,
          borderWidth: 2,
          pointStyle: false
        }]
      },
      options: {
        responsive: false,
        scales: {
          y: {
            display: false
          },
          x: {
            display: false
          }
        },
        plugins: {
          legend: {
            display: false
          }
        }
      }
    });
  }
  if (canvasTrendingDown) {
    var GraphTrendingDown = new Chart(canvasTrendingDown, {
      type: 'line',
      data: {
        labels: ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница'],
        datasets: [{
          label: 'Продажи',
          data: [0, 30, 20, 25, 22],
          backgroundColor: 'rgba(0, 0, 0, 0)',
          borderColor: colors.accent,
          tension: .5,
          borderWidth: 2,
          pointStyle: false
        }]
      },
      options: {
        responsive: false,
        scales: {
          y: {
            display: false
          },
          x: {
            display: false
          }
        },
        plugins: {
          legend: {
            display: false
          }
        }
      }
    });
  }
  //** (End) Graph Without Scales **//

  //** (Start) For Tables Collapse **//
  var collapseWrappers = document.querySelectorAll('.table-collapse-nested');
  collapseWrappers.forEach(function (wrapper) {
    var collapseElement = wrapper.querySelector('.collapse');
    if (collapseElement.classList.contains('show')) {
      wrapper.classList.add('is-active');
    }
    collapseElement.addEventListener('show.bs.collapse', function (event) {
      event.stopPropagation();
      wrapper.classList.add('is-active');
    });
    collapseElement.addEventListener('hidden.bs.collapse', function (event) {
      event.stopPropagation();
      wrapper.classList.remove('is-active');
    });
  });
  //** (End) For Tables Collapse **//

  //** (Start) For Tables Buttons **//
  var dropdownToggles = document.querySelectorAll('.dropdown-toggle');
  dropdownToggles.forEach(function (dropdownToggle) {
    dropdownToggle.addEventListener('show.bs.dropdown', function () {
      var cellButton = dropdownToggle.closest('.cell-button');
      if (cellButton) cellButton.classList.add('is-active');
    });
    dropdownToggle.addEventListener('hide.bs.dropdown', function () {
      var cellButton = dropdownToggle.closest('.cell-button');
      if (cellButton) cellButton.classList.remove('is-active');
    });
  });
  //** (End) For Tables Buttons **//

  //** (Start) Vanilla Calendar **//
  var dropdownCalendars = document.querySelectorAll('.dropdown-calendar');
  dropdownCalendars.forEach(function (dropdownCalendar) {
    var dropdownButton = dropdownCalendar.querySelector('.btn-calendar');
    var dropdownButtonFirstDate = dropdownButton.querySelector('.first');
    var dropdownButtonSecondDate = dropdownButton.querySelector('.second');
    var dropdownMenu = dropdownCalendar.querySelector('.dropdown-menu');
    var vanilaCalendar = dropdownCalendar.querySelector('.vanilla-calendar');
    var options = {
      type: 'default',
      settings: {
        lang: 'ru',
        visibility: {
          theme: 'light',
          weekend: false,
          daysOutside: false
        }
      },
      actions: {
        clickDay: function clickDay(e, dates) {
          var selected = dates[0];
          var selectedDate = calendar.HTMLElement.querySelector('.vanilla-calendar-header__selected_date');
          selectedDate.textContent = dateSelectedFormatter(selected);
        }
      },
      DOMTemplates: {
        "default": "\n\t\t\t\t\t\t\t\t\t<div class=\"vanilla-calendar-header\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"vanilla-calendar-header__top\">\n\t\t\t\t\t\t\t\t\t\t\t<span class=\"vanilla-calendar-header__selected_date\"></span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t<div class=\"vanilla-calendar-header__bottom\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"vanilla-calendar-header__content\">\n\t\t\t\t\t\t\t\t\t\t\t\t<#Month />\n\t\t\t\t\t\t\t\t\t\t\t\t<#Year />\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"vanilla-calendar-header__navigation\">\n\t\t\t\t\t\t\t\t\t\t\t\t<#ArrowPrev />\n\t\t\t\t\t\t\t\t\t\t\t\t<#ArrowNext />\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"vanilla-calendar-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<#WeekNumbers />\n\t\t\t\t\t\t\t\t\t\t<div class=\"vanilla-calendar-content\">\n\t\t\t\t\t\t\t\t\t\t\t<#Week />\n\t\t\t\t\t\t\t\t\t\t\t<#Days />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"vanilla-calendar-buttons\">\n\t\t\t\t\t\t\t\t\t\t<button class=\"btn vanilla-calendar-buttons__close\">\u0417\u0430\u043A\u0440\u044B\u0442\u044C</button>\n\t\t\t\t\t\t\t\t\t\t<button class=\"btn vanilla-calendar-buttons__save\">\u041E\u043A</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t"
      }
    };
    var calendar = new VanillaCalendar(vanilaCalendar, options);
    calendar.init();
    var selectedDate = dropdownCalendar.querySelector('.vanilla-calendar-header__selected_date');
    function hideCalendar() {
      dropdownCalendar.classList.remove('is-active');
      dropdownButton.classList.remove('show');
      dropdownButton.setAttribute('aria-expanded', 'false');
      dropdownMenu.classList.remove('show');
    }
    function datePickerFormatter(date) {
      var options = {
        day: '2-digit',
        month: '2-digit',
        year: '2-digit'
      };
      var formattedDate = new Date(date);
      var formattedDateString = formattedDate.toLocaleDateString('ru', options);
      var _formattedDateString$ = formattedDateString.split('.'),
        _formattedDateString$2 = _slicedToArray(_formattedDateString$, 3),
        day = _formattedDateString$2[0],
        month = _formattedDateString$2[1],
        year = _formattedDateString$2[2];
      return "".concat(day, ".").concat(month, ".").concat(year);
    }
    function dateSelectedFormatter(date) {
      var options = {
        day: '2-digit',
        month: 'long',
        year: 'numeric'
      };
      var formattedDate = new Date(date);
      var formattedDateString = formattedDate.toLocaleDateString('ru', options);
      return formattedDateString;
    }
    function handleCalendarTypeChange(_selectedDate) {
      var today = new Date();
      _selectedDate.textContent = dateSelectedFormatter(today);
      vanilaCalendar.addEventListener('click', function (event) {
        if (event.target.matches('.vanilla-calendar-buttons__close')) {
          hideCalendar();
        } else if (event.target.matches('.vanilla-calendar-buttons__save')) {
          if (calendar.selectedDates.length > 0) {
            var formattedDateFirst = datePickerFormatter(calendar.selectedDates[0]);
            dropdownButtonFirstDate.textContent = formattedDateFirst;
            hideCalendar();
          }
        }
      });
    }
    handleCalendarTypeChange(selectedDate);
    var calendarType = calendar.currentType;
    Object.defineProperty(calendar, 'currentType', {
      get: function get() {
        return calendarType;
      },
      set: function set(value) {
        calendarType = value;
        if (!(calendarType === 'month') && !(calendarType === 'year')) {
          requestAnimationFrame(function () {
            var selectedDate = dropdownCalendar.querySelector('.vanilla-calendar-header__selected_date');
            if (calendar.selectedDates.length > 0) {
              selectedDate.textContent = dateSelectedFormatter(calendar.selectedDates[0]);
            } else {
              handleCalendarTypeChange(selectedDate);
            }
          });
        }
      }
    });
  });
  //** (End) Vanilla Calendar **//

  // const modal123 = new bootstrap.Modal(document.getElementById('bindCountryModal'));
  // modal123.show();
});
/******/ })()
;