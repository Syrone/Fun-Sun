/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
document.addEventListener('DOMContentLoaded', function () {
  //** (Start) Var CSS **//
  var rootStyles = getComputedStyle(document.documentElement);
  var colors = {
    background: rootStyles.getPropertyValue('--background'),
    accent: rootStyles.getPropertyValue('--accent'),
    accent50: rootStyles.getPropertyValue('--accent-50'),
    secondary: rootStyles.getPropertyValue('--secondary'),
    secondary50: rootStyles.getPropertyValue('--secondary-50'),
    third: rootStyles.getPropertyValue('--third'),
    fourth: rootStyles.getPropertyValue('--fourth'),
    fifth: rootStyles.getPropertyValue('--fifth'),
    warning: rootStyles.getPropertyValue('--warning'),
    textDark: rootStyles.getPropertyValue('--text-color--dark'),
    textLight: rootStyles.getPropertyValue('--text-color--light')
  };
  //** (End) Var CSS **//

  //** (Start) Graph Functions **//
  function getDoughnutGradient(chart) {
    var ctx = chart.ctx;
    var gradientSegment = ctx.createLinearGradient(20, 20, 150, 150);
    gradientSegment.addColorStop(0, '#8EB8FF');
    gradientSegment.addColorStop(1, '#4872F2');
    return gradientSegment;
  }
  var getOrCreateTooltip = function getOrCreateTooltip(chart) {
    var container = chart.canvas.parentNode;
    var tooltipEl = container.querySelector('.tooltip-canvas');
    if (!tooltipEl) {
      tooltipEl = document.createElement('div');
      tooltipEl.classList.add('tooltip-canvas');
      var tooltipUl = document.createElement('ul');
      tooltipUl.classList.add('tooltip-list', 'list-group');
      tooltipEl.appendChild(tooltipUl);
      container.appendChild(tooltipEl);
    }
    return tooltipEl;
  };
  var externalTooltipHandler = function externalTooltipHandler(context) {
    var chart = context.chart,
      tooltip = context.tooltip;
    var tooltipEl = getOrCreateTooltip(chart);
    if (tooltip.opacity === 0) {
      tooltipEl.style.opacity = 0;
      return;
    }
    if (tooltip.dataPoints.length > 0) {
      var label = tooltip.dataPoints[0].dataset.label;
      var labelData = tooltip.dataPoints[0].dataset.label[tooltip.dataPoints[0].dataIndex];
      var data = tooltip.dataPoints[0].dataset.data[tooltip.dataPoints[0].dataIndex];
      var date = new Date(tooltip.dataPoints[0].chart.data.labels[tooltip.dataPoints[0].dataIndex]);
      var formatterDate = date.toLocaleString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      }).replace(' г.', '');
      var tooltipUl = tooltipEl.querySelector('ul');
      var tooltipLi = document.createElement('li');
      tooltipLi.classList.add('list-group-item');
      var tooltipTitleSpan = document.createElement('span');
      var tooltipDateSpan = document.createElement('date');
      var tooltipDate = document.createTextNode(formatterDate);
      var tooltipTitle;
      if (Array.isArray(label)) {
        tooltipTitle = document.createTextNode(data + ' ' + labelData);
      } else {
        tooltipTitle = document.createTextNode(data + ' ' + label);
      }
      tooltipTitleSpan.classList.add('title');
      tooltipDateSpan.classList.add('date');
      tooltipUl.appendChild(tooltipLi);
      tooltipLi.appendChild(tooltipTitleSpan);
      tooltipLi.appendChild(tooltipDateSpan);
      tooltipTitleSpan.appendChild(tooltipTitle);
      tooltipDateSpan.appendChild(tooltipDate);
      while (tooltipUl.firstChild) {
        tooltipUl.firstChild.remove();
      }
      tooltipUl.appendChild(tooltipLi);
      tooltipEl.style.opacity = 1;
    }
    var _chart$canvas = chart.canvas,
      positionX = _chart$canvas.offsetLeft,
      positionY = _chart$canvas.offsetTop;
    var tooltipWidth = tooltipEl.offsetWidth;
    var tooltipHeight = tooltipEl.offsetHeight;
    var containerHeight = chart.height;

    // Учитываем смещение прокрутки
    var container = chart.canvas.parentNode.parentNode;
    var containerWidth = chart.canvas.parentNode.parentNode.offsetWidth;
    var scrollLeft = container.scrollLeft;
    var tooltipLeft = positionX + tooltip.caretX - tooltipWidth / 2;
    var tooltipTop = positionY + tooltip.caretY - tooltipHeight - 20;
    if (tooltip.caretX - tooltipWidth / 2 < scrollLeft) {
      tooltipLeft = scrollLeft;
      tooltipEl.classList.add('overflow-start');
    } else if (tooltip.caretX + tooltipWidth / 2 > containerWidth + scrollLeft) {
      tooltipLeft = containerWidth - tooltipWidth + scrollLeft;
      tooltipEl.classList.add('overflow-end');
    } else {
      tooltipEl.classList.remove('overflow-start');
      tooltipEl.classList.remove('overflow-end');
    }
    if (tooltipTop < 0) {
      tooltipTop = 0;
    } else if (tooltipTop + tooltipHeight > containerHeight) {
      tooltipTop = containerHeight - tooltipHeight;
    }
    tooltipEl.style.left = tooltipLeft + "px";
    tooltipEl.style.top = tooltipTop + "px";
  };
  function createDiagonalPattern(colorStroke, colorFill) {
    var canvas = document.createElement('canvas');
    var context = canvas.getContext('2d');
    var size = 20;
    var stroke = 8;
    var strokeOffset = stroke / 2;
    canvas.width = size;
    canvas.height = size;
    context.fillStyle = colorFill;
    context.fillRect(0, 0, size, size);
    context.strokeStyle = colorStroke, colorFill;
    context.lineWidth = stroke;

    // Отрисовка наклонных линий
    context.moveTo(-strokeOffset, size / 2 - strokeOffset);
    context.lineTo(size / 2 + strokeOffset, size + strokeOffset);
    context.moveTo(size / 2 - strokeOffset, -strokeOffset);
    context.lineTo(size + strokeOffset, size / 2 + strokeOffset);
    context.stroke();

    // Создание временного холста для разворота
    var tempCanvas = document.createElement('canvas');
    var tempContext = tempCanvas.getContext('2d');
    tempCanvas.width = size;
    tempCanvas.height = size;
    tempContext.drawImage(canvas, 0, 0);

    // Создание развернутого узора
    var mirroredCanvas = document.createElement('canvas');
    var mirroredContext = mirroredCanvas.getContext('2d');
    mirroredCanvas.width = size;
    mirroredCanvas.height = size;
    mirroredContext.scale(-1, 1);
    mirroredContext.translate(-size, 0);
    mirroredContext.drawImage(tempCanvas, 0, 0);
    return mirroredContext.createPattern(mirroredCanvas, 'repeat');
  }
  //** (End) Graph Functions **//

  //** (Start) Graph Plugins **//
  var doughnetBackground = {
    beforeDatasetsDraw: function beforeDatasetsDraw(chart) {
      var ctx = chart.ctx,
        data = chart.data;
      var innerRadius = chart.getDatasetMeta(0).data[0].innerRadius;
      var outerRadius = chart.getDatasetMeta(0).data[0].outerRadius;
      var sliceThickness = outerRadius - innerRadius + 6;
      var angle = Math.PI / 180;
      ctx.save();
      data.datasets.forEach(function (dataset, index) {
        chart.getDatasetMeta(index).data[0].innerRadius = innerRadius - sliceThickness * index;
        chart.getDatasetMeta(index).data[0].outerRadius = outerRadius - sliceThickness * index;
        ctx.beginPath();
        ctx.lineWidth = chart.getDatasetMeta(index).data[0].outerRadius - chart.getDatasetMeta(index).data[0].innerRadius;
        ctx.arc(chart.getDatasetMeta(index).data[0].x, chart.getDatasetMeta(index).data[0].y, chart.getDatasetMeta(index).data[0].outerRadius - (chart.getDatasetMeta(index).data[0].outerRadius - chart.getDatasetMeta(index).data[0].innerRadius) / 2, 0, angle * 360, false);
        ctx.strokeStyle = '#919EAB29';
        ctx.stroke();
      });
    }
  };
  var doughnetGradient = {
    beforeDatasetsDraw: function beforeDatasetsDraw(chart) {
      var ctx = chart.ctx;
      var gradientAccent = ctx.createLinearGradient(20, 20, 220, 220);
      var gradientWarning = ctx.createLinearGradient(20, 20, 220, 220);
      gradientAccent.addColorStop(0, '#8EB8FF');
      gradientAccent.addColorStop(1, '#4872F2');
      gradientWarning.addColorStop(0, '#FA9596');
      gradientWarning.addColorStop(1, '#E73C3E');
      chart.getDatasetMeta(0).data[0].options.backgroundColor = gradientAccent;
      if (chart.getDatasetMeta().length > 1) {
        chart.getDatasetMeta(1).data[0].options.backgroundColor = gradientWarning;
      }
    }
  };
  var doughnutLabel = {
    beforeInit: function beforeInit(chart) {
      var ctx = chart.ctx,
        data = chart.data;
      var totalData = data.datasets.reduce(function (total, dataset) {
        return total + dataset.data.reduce(function (sum, value) {
          return sum + value;
        }, 0);
      }, 0);
      var labelContainer = document.createElement('div');
      labelContainer.classList.add('current-data');
      labelContainer.innerHTML = "\n\t\t\t\t\t\u0412\u0441\u0435\u0433\u043E\n\t\t\t\t\t<span>".concat(totalData.toLocaleString('en-US'), "</span>\n\t\t\t\t");
      ctx.canvas.parentNode.appendChild(labelContainer);
    }
  };
  //** (End) Graph Plugins **//

  //** (Start) Graph Init **//
  var canvasTrendingUp = document.getElementById('canvasTrendingUp');
  var canvasTrendingDown = document.getElementById('canvasTrendingDown');
  var canvasTypePromotion = document.getElementById('graphTypePromotion');
  var canvasAttribution = document.getElementById('graphAttribution');
  var canvasStatus = document.getElementById('graphStatus');
  var canvasMarketingDivision = document.getElementById('graphMarketingDivision');
  var canvasQuantityByMonth = document.getElementById('graphQuantityByMonth');
  var canvasQuantityByMonthAxesY = document.getElementById('graphQuantityByMonthAxesY');
  var max;
  if (canvasTrendingUp) {
    var graphTrendingUp = new Chart(canvasTrendingUp, {
      type: 'line',
      data: {
        labels: ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница'],
        datasets: [{
          label: 'Продажи',
          data: [25, 5, 20, 0, 30],
          backgroundColor: 'rgba(0, 0, 0, 0)',
          borderColor: colors.secondary,
          tension: .45,
          borderWidth: 2,
          pointStyle: false
        }]
      },
      options: {
        maintainAspectRatio: false,
        scales: {
          y: {
            display: false
          },
          x: {
            display: false
          }
        },
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            enabled: false
          }
        }
      }
    });
  }
  if (canvasTrendingDown) {
    var graphTrendingDown = new Chart(canvasTrendingDown, {
      type: 'line',
      data: {
        labels: ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница'],
        datasets: [{
          label: 'Продажи',
          data: [0, 30, 20, 25, 22],
          backgroundColor: 'rgba(0, 0, 0, 0)',
          borderColor: colors.accent,
          tension: .5,
          borderWidth: 2,
          pointStyle: false
        }]
      },
      options: {
        maintainAspectRatio: false,
        scales: {
          y: {
            display: false
          },
          x: {
            display: false
          }
        },
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            enabled: false
          }
        }
      }
    });
  }
  if (canvasTypePromotion) {
    var dates = [new Date('2022-01-01')];
    var graphTypePromotion = new Chart(canvasTypePromotion, {
      type: 'doughnut',
      data: {
        labels: dates,
        datasets: [{
          label: 'B2B',
          data: [5000],
          pointStyle: false,
          circumference: function circumference(ctx) {
            var dataPoints = ctx.chart.data.datasets.map(function (dataset) {
              return dataset.data[0];
            });
            max = Math.max.apply(Math, _toConsumableArray(dataPoints));
            return ctx.dataset.data / max * 275;
          }
        }]
      },
      options: {
        borderColor: '',
        hoverBorderColor: '',
        borderWidth: 0,
        borderRadius: 16,
        cutout: 85,
        layout: {
          padding: 2
        },
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            enabled: false,
            external: externalTooltipHandler
          }
        }
      },
      plugins: [doughnutLabel, doughnetBackground, doughnetGradient]
    });
  }
  if (canvasAttribution) {
    var _dates = [new Date('2022-01-01'), new Date('2022-02-01')];
    var graphAttribution = new Chart(canvasAttribution, {
      type: 'doughnut',
      data: {
        labels: _dates,
        datasets: [{
          label: 'Есть',
          data: [5000],
          pointStyle: false,
          circumference: function circumference(ctx) {
            var dataPoints = ctx.chart.data.datasets.map(function (dataset) {
              return dataset.data[0];
            });
            max = Math.max.apply(Math, _toConsumableArray(dataPoints));
            return ctx.dataset.data / max * 330;
          }
        }, {
          label: 'Нет',
          data: [5989],
          pointStyle: false,
          circumference: function circumference(ctx) {
            return ctx.dataset.data / max * 180;
          }
        }]
      },
      options: {
        borderColor: '',
        hoverBorderColor: '',
        borderWidth: 0,
        borderRadius: 16,
        cutout: 85,
        layout: {
          padding: 2
        },
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            enabled: false,
            external: externalTooltipHandler
          }
        }
      },
      plugins: [doughnutLabel, doughnetBackground, doughnetGradient]
    });
  }
  if (canvasStatus) {
    var _dates2 = [new Date('2022-01-01'), new Date('2022-02-01')];
    var graphStatus = new Chart(canvasStatus, {
      type: 'doughnut',
      data: {
        labels: _dates2,
        datasets: [{
          label: ['Заплонированных', 'Выполненных'],
          data: [8500, 2489],
          backgroundColor: function backgroundColor(context) {
            var chart = context.chart;
            var chartArea = chart.chartArea;
            if (!chartArea) {
              return null;
            }
            return getDoughnutGradient(chart);
          },
          pointStyle: false
        }]
      },
      options: {
        borderColor: 'rgb(255, 255, 255)',
        hoverBorderColor: 'rgb(255, 255, 255)',
        borderWidth: 5,
        cutout: 85,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            enabled: false,
            external: externalTooltipHandler
          }
        }
      },
      plugins: [doughnutLabel]
    });
  }
  if (canvasMarketingDivision) {
    var _dates3 = [new Date('2022-01-01'), new Date('2022-02-01'), new Date('2022-03-01'), new Date('2022-04-01'), new Date('2022-05-01'), new Date('2022-06-01')];
    var graphMarketingDivision = new Chart(canvasMarketingDivision, {
      type: 'doughnut',
      data: {
        labels: _dates3,
        datasets: [{
          label: ['Operational Marketing', 'Advertising', 'E-Commerce', 'SMM B2C', 'Franchising', 'ЗТА'],
          data: [6989, 6989, 2000, 2989, 2989, 2989],
          backgroundColor: [colors.accent, colors.secondary, colors.third, colors.warning, colors.fourth, colors.fifth],
          pointStyle: false
        }]
      },
      options: {
        borderColor: 'rgb(255, 255, 255)',
        hoverBorderColor: 'rgb(255, 255, 255)',
        borderWidth: 5,
        cutout: 88,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            enabled: false,
            external: externalTooltipHandler
          }
        }
      },
      plugins: [doughnutLabel]
    });
  }
  if (canvasQuantityByMonth && canvasQuantityByMonthAxesY) {
    //** (Start) Graph Change Font-size **//
    var responsiveFonts = function responsiveFonts() {
      var screenWidth = window.innerWidth;
      if (screenWidth < 1200) {
        graphQuantityByMonth.config._config.options.scales.x.ticks.font.size = '10';
        graphQuantityByMonthAxesY.config._config.options.scales.y.ticks.font.size = '10';
      } else if (screenWidth > 1200) {
        graphQuantityByMonth.config._config.options.scales.x.ticks.font.size = '14';
        graphQuantityByMonthAxesY.config._config.options.scales.y.ticks.font.size = '14';
      }
      graphQuantityByMonth.resize();
      graphQuantityByMonthAxesY.resize();
    };
    var _dates4 = [new Date('2022-01-01'), new Date('2022-02-13'), new Date('2022-03-21'), new Date('2022-04-11'), new Date('2022-05-06'), new Date('2022-06-26'), new Date('2022-07-24'), new Date('2022-08-24'), new Date('2022-09-02'), new Date('2022-10-11'), new Date('2022-11-11'), new Date('2022-12-01')];
    var data = {
      labels: _dates4,
      datasets: [{
        label: 'Выполненных',
        data: [450, 250, 350, 400, 150, 500, 450, 300, 350, 400, 470, 470],
        backgroundColor: colors.secondary,
        hoverBackgroundColor: createDiagonalPattern(colors.secondary, colors.secondary50),
        pointStyle: false
      }, {
        label: 'Запланированных',
        data: [550, 210, 500, 700, 270, 250, 550, 250, 500, 700, 250, 250],
        backgroundColor: colors.accent,
        hoverBackgroundColor: createDiagonalPattern(colors.accent, colors.accent50),
        pointStyle: false
      }]
    };
    var graphQuantityByMonth = new Chart(canvasQuantityByMonth, {
      type: 'bar',
      data: data,
      options: {
        maintainAspectRatio: false,
        layout: {
          padding: {
            top: 28.2
          }
        },
        borderRadius: {
          topLeft: 8,
          topRight: 8,
          bottomLeft: 0,
          bottomRight: 0
        },
        scales: {
          x: {
            border: {
              display: false
            },
            grid: {
              display: false,
              drawTicks: false
            },
            display: true,
            type: 'timeseries',
            time: {
              unit: 'month',
              displayFormats: {
                month: 'MMM'
              }
            },
            ticks: {
              callback: function callback(value, index, values) {
                var date = new Date(value);
                var month = date.toLocaleString('ru-RU', {
                  month: 'short'
                }).slice(0, 3);
                return month.charAt(0).toUpperCase() + month.slice(1);
              },
              font: {
                family: 'Open-sans',
                size: 14,
                weight: '400'
              },
              color: colors.textLight,
              padding: 20
            },
            offset: true,
            offsetPercentage: 10
          },
          y: {
            beginAtZero: true,
            border: {
              display: false
            },
            grid: {
              color: '#f5f5f5',
              drawTicks: false
            },
            ticks: {
              display: false
            }
          }
        },
        plugins: {
          legend: {
            display: false
          },
          interaction: {
            mode: 'index',
            intersect: false
          },
          tooltip: {
            enabled: false,
            external: externalTooltipHandler
          }
        },
        barPercentage: 0.8
      }
    });
    var graphQuantityByMonthAxesY = new Chart(canvasQuantityByMonthAxesY, {
      type: 'bar',
      data: data,
      options: {
        maintainAspectRatio: false,
        layout: {
          padding: {
            bottom: 59.35
          }
        },
        borderRadius: {
          topLeft: 8,
          topRight: 8,
          bottomLeft: 0,
          bottomRight: 0
        },
        scales: {
          x: {
            display: false
          },
          y: {
            beginAtZero: true,
            afterFit: function afterFit(ctx) {
              ctx.width = 46;
            },
            border: {
              display: false
            },
            grid: {
              color: '#f5f5f5',
              drawTicks: false
            },
            ticks: {
              font: {
                family: 'Open-sans',
                size: 14,
                weight: '400'
              },
              color: colors.textLight,
              padding: 20
            }
          }
        },
        plugins: {
          legend: {
            display: false
          },
          interaction: {
            mode: 'index',
            intersect: false
          }
        }
      }
    });
    window.addEventListener('resize', responsiveFonts);
    window.addEventListener('onload', responsiveFonts);
    //** (End) Graph Change Font-size **//
  }
  //** (End) Graph Init **//
});
/******/ })()
;