/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
document.addEventListener('DOMContentLoaded', function () {
  var tooltipHeaderList = [].slice.call(document.querySelectorAll('[data-bs-tooltip="tooltip"]'));
  var tooltipHeader = tooltipHeaderList.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl);
  });
  var tooltipHeaderListLight = [].slice.call(document.querySelectorAll('[data-bs-tooltip="tooltip-light"]'));
  var tooltipHeaderLight = tooltipHeaderListLight.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl, {
      customClass: 'tooltip-light'
    });
  });

  /** (Start) Checked all input checkbox **/
  var handleCheckboxes = document.querySelectorAll('input[data-handle-checkbox]');
  if (handleCheckboxes.length > 0) {
    handleCheckboxes.forEach(function (checkbox) {
      var targetBlock = document.querySelector("[data-target-checkbox=\"".concat(checkbox.getAttribute('data-handle-checkbox'), "\"]"));
      checkbox.addEventListener('change', function () {
        if (checkbox.checked) {
          var targetCheckboxes = targetBlock.querySelectorAll('input[type="checkbox"]');
          targetCheckboxes.forEach(function (targetCheckbox) {
            targetCheckbox.checked = true;
          });
        } else {
          var _targetCheckboxes = targetBlock.querySelectorAll('input[type="checkbox"]');
          _targetCheckboxes.forEach(function (targetCheckbox) {
            targetCheckbox.checked = false;
          });
        }
      });
    });
  }
  /** (End) Checked all input checkbox **/

  /** (Start) Show/hide Password **/
  var passwordWrappers = document.querySelectorAll('[data-input-password]');
  passwordWrappers.forEach(function (wrapper) {
    var passwordInput = wrapper.querySelector('input[type="password"]');
    var showPasswordButton = wrapper.querySelector('button.icon-password');
    showPasswordButton.addEventListener('click', function () {
      var isActive = showPasswordButton.classList.contains('is-active');
      if (isActive) {
        showPasswordButton.classList.remove('is-active');
        passwordInput.type = 'password';
      } else {
        showPasswordButton.classList.add('is-active');
        passwordInput.type = 'text';
      }
    });
  });
  /** (End) Show/Hide Password **/

  /** (Start) Адаптивная высота таблицы **/
  var tableElements = document.querySelectorAll('.table-fullscreen');
  var tabTableElements = document.querySelectorAll('.tab-table-fullscreen');
  var navLinksTable = document.querySelectorAll('.nav-link-table');
  var tablesHandleScroll = document.querySelectorAll('[data-handle-scroll]');
  function calculateTableHeight() {
    var windowWidth = window.innerWidth;
    var windowHeight = window.innerHeight;
    var calculateHeight = function calculateHeight(tableElement) {
      var tableOffsetTop = tableElement.getBoundingClientRect().top;
      var wrapPagination = document.querySelector('.wrapper-pagination');
      var paginationHeight = wrapPagination ? wrapPagination.offsetHeight : 0;
      var tableHeight = windowHeight - tableOffsetTop - paginationHeight - 20;
      if (windowWidth >= 992 && windowHeight >= 768) {
        tableElement.style.height = tableHeight + 'px';
      } else {
        tableElement.style.height = '';
      }
    };
    tableElements.forEach(function (tableElement) {
      if (tableElements.length > 0) {
        calculateHeight(tableElement);
      }
    });
    var tabPaneTable = document.querySelectorAll('.tab-pane-table');
    if (tabPaneTable.length > 0 && tabTableElements.length > 0) {
      tabPaneTable.forEach(function (tabTableElement) {
        var tableElement = tabTableElement.querySelector('.tab-table-fullscreen');
        var wrapPagination = tabTableElement.querySelector('.wrapper-pagination');
        var paginationHeight = wrapPagination ? wrapPagination.offsetHeight : 0;
        var tableOffsetTop = tableElement.getBoundingClientRect().top;
        var tableHeight = windowHeight - tableOffsetTop - paginationHeight - 20;
        if (windowWidth >= 992 && windowHeight >= 768) {
          tableElement.style.height = tableHeight + 'px';
        } else {
          tableElement.style.height = '';
        }
      });
    }
  }
  function closeDropdownMenus() {
    var dropdownCellButtons = document.querySelectorAll('.table-wrapper tbody .cell-button.is-active');
    dropdownCellButtons.forEach(function (dropdownCellButton) {
      dropdownCellButton.classList.remove('is-active');
    });
    var dropdownButtons = document.querySelectorAll('.table-wrapper tbody .dropdown-toggle');
    dropdownButtons.forEach(function (dropdownButton) {
      dropdownButton.classList.remove('show');
      dropdownButton.setAttribute('aria-expanded', 'false');
    });
    var dropdownMenus = document.querySelectorAll('.table-wrapper tbody .dropdown-menu.show');
    dropdownMenus.forEach(function (dropdownMenu) {
      dropdownMenu.classList.remove('show');
    });
  }
  function handleScroll(event) {
    var tableElement = event.target;
    var scrollTop = tableElement.scrollTop;
    var scrollThreshold = 2;
    var isScrollingDown;
    var parentElement = tableElement.closest('.table-wrapper');
    if (scrollTop > scrollThreshold && !isScrollingDown) {
      parentElement.classList.add('scroll');
      isScrollingDown = true;
    } else if (scrollTop <= scrollThreshold && isScrollingDown) {
      parentElement.classList.remove('scroll');
      isScrollingDown = false;
    } else if (scrollTop === 0) {
      parentElement.classList.remove('scroll');
      isScrollingDown = false;
    }
    calculateTableHeight();
    closeDropdownMenus();
  }
  function handleResize() {
    if (window.innerWidth >= 992) {
      tableElements.forEach(function (tableElement) {
        tableElement.addEventListener('scroll', handleScroll);
      });
    } else {
      tableElements.forEach(function (tableElement) {
        tableElement.removeEventListener('scroll', handleScroll);
      });
    }
    if (tablesHandleScroll.length > 0) {
      tablesHandleScroll.forEach(function (tableHandleScroll) {
        tableHandleScroll.addEventListener('scroll', handleScroll);
      });
    }
    closeDropdownMenus();
  }
  window.addEventListener('load', function () {
    calculateTableHeight();
    handleResize();
  });
  window.addEventListener('resize', function () {
    calculateTableHeight();
    handleResize();
  });
  navLinksTable.forEach(function (navLinkTable) {
    navLinkTable.addEventListener('hidden.bs.tab', function () {
      calculateTableHeight();
    });
    navLinkTable.addEventListener('shown.bs.tab', function () {
      navLinkTable.addEventListener('transitionend', function () {
        calculateTableHeight();
      });
    });
  });
  var observerTabTableHeight = new MutationObserver(function (mutationsList, observer) {
    calculateTableHeight();
  });
  if (tablesHandleScroll.length > 0) {
    tablesHandleScroll.forEach(function (tableHandleScroll) {
      tableHandleScroll.addEventListener('scroll', handleScroll);
    });
  }
  tabTableElements.forEach(function (tabTableElement) {
    tabTableElement.addEventListener('scroll', handleScroll);
    observerTabTableHeight.observe(tabTableElement, {
      childList: true,
      subtree: true
    });
  });
  /** (End) Адаптивная высота таблицы **/

  /** (Start) Проверка наличия Scroll **/
  var elementsScroll = document.querySelectorAll('[data-scroll-check]');
  function elementsHandleScroll() {
    if (elementsScroll.length > 0) {
      elementsScroll.forEach(function (element) {
        var hasVerticalScrollbar = element.scrollHeight > element.clientHeight;
        element.setAttribute('data-scroll-check', hasVerticalScrollbar);
      });
    }
  }
  if (navLinksTable.length > 0) {
    navLinksTable.forEach(function (navLinkTable) {
      navLinkTable.addEventListener('hidden.bs.tab', function () {
        elementsHandleScroll();
      });
      navLinkTable.addEventListener('shown.bs.tab', function () {
        navLinkTable.addEventListener('transitionend', function () {
          elementsHandleScroll();
        });
      });
    });
  }
  if (elementsScroll.length > 0) {
    var observerElementsHeight = new MutationObserver(function () {
      elementsHandleScroll();
    });
    elementsScroll.forEach(function (element) {
      observerElementsHeight.observe(element, {
        attributes: true,
        attributeFilter: ['class'],
        subtree: true
      });
    });
    elementsHandleScroll();
    document.addEventListener('resize', elementsHandleScroll);
    document.addEventListener('load', elementsHandleScroll);
  }
  /** (End) Проверка наличия Scroll **/

  //** (Start) Backdrop for Header Menu Mobile **/
  var showBackdropBtn = document.querySelector('.btn-backdrop');
  var backdrop = null;
  if (showBackdropBtn) {
    showBackdropBtn.addEventListener('click', function () {
      if (backdrop) {
        backdrop.remove();
        backdrop = null;
      } else {
        backdrop = document.createElement('div');
        backdrop.classList.add('modal-backdrop');
        document.querySelector('.header').appendChild(backdrop);
      }
    });
  }
  document.addEventListener('click', function (event) {
    var backdropModal = document.querySelector(".modal-backdrop");
    var backdrop = null;
    if (event.target === backdropModal) {
      backdropModal.remove();
      backdrop = null;
    }
    var navbar = document.getElementById("headerMenu");
    var target = event.target;
    if (navbar) {
      var isNavbar = navbar.contains(target);
      if (!isNavbar && navbar.classList.contains("show")) {
        var toggle = document.querySelector("[data-bs-toggle='collapse']");
        toggle.click();
      }
    }
  });
  //** (End) Backdrop for Header Menu Mobile **/

  //** (Start) Swiper Buttons **//
  var swiperButtons = new Swiper('.swiper-buttons', {
    slidesPerView: 'auto',
    spaceBetween: 8,
    freeMode: true,
    slideToClickedSlide: true
  });
  var swiperButtonsTab = new Swiper('.swiper-buttons-tab', {
    slidesPerView: 'auto',
    spaceBetween: 8,
    freeMode: true,
    slideToClickedSlide: true,
    breakpoints: {
      0: {
        slidesPerView: 2,
        spaceBetween: 8
      },
      375: {
        slidesPerView: 'auto'
      }
    }
  });
  var swiperButtonsTabOverflow = new Swiper('.swiper-buttons-tab-overflow', {
    slidesPerView: 'auto',
    spaceBetween: 8,
    freeMode: true,
    slideToClickedSlide: true
  });
  //** (End) Swiper Buttons **//

  //** (Start) Close Buttons Dropdown **//
  var dropdownFilters = document.querySelectorAll('.dropdown-filter');
  dropdownFilters.forEach(function (dropdownFilter) {
    var dropdownNested = dropdownFilter.querySelectorAll('.dropdown-nested');
    dropdownNested.forEach(function (nested) {
      var dropdownMenu = nested.querySelector('.dropdown-menu');
      var observer = new MutationObserver(function (mutations) {
        var hasOpenMenu = false;
        dropdownNested.forEach(function (nested) {
          var dropdownMenu = nested.querySelector('.dropdown-menu');
          if (dropdownMenu.classList.contains('show')) {
            hasOpenMenu = true;
          }
        });
        if (hasOpenMenu) {
          dropdownFilter.classList.add('nested');
        } else {
          dropdownFilter.classList.remove('nested');
        }
      });
      observer.observe(dropdownMenu, {
        attributes: true
      });
    });
  });
  //** (End) Close Buttons Dropdown **//

  //** (Start) Close Buttons Dropdown Nested **//
  var closeDropdownButtons = document.getElementsByClassName('dropdown-dissmis');
  for (var i = 0; i < closeDropdownButtons.length; i++) {
    closeDropdownButtons[i].addEventListener('click', function () {
      var dropdownMenu = this.parentNode.parentNode.parentNode;
      var dropdownToggle = dropdownMenu.parentNode.querySelector('.dropdown-toggle');
      dropdownMenu.classList.remove('show');
      dropdownToggle.classList.remove('show');
      dropdownToggle.setAttribute('aria-expanded', 'false');
    });
  }
  //** (End) Close Buttons Dropdown Nested **//

  //** (Start) Checked From Check **//
  var checkboxes = document.querySelectorAll('.form-check-input');
  var formChecks = document.querySelectorAll('.form-check');
  checkboxes.forEach(function (checkbox, index) {
    if (!checkbox.classList.contains('is-radio')) {
      checkbox.addEventListener('change', function () {
        if (this.checked) {
          formChecks[index].classList.add('checked');
        } else {
          formChecks[index].classList.remove('checked');
        }
      });
    }
  });
  //** (End) Checked From Check **//

  //** (Start) For Tables Collapse **//
  var collapseWrappers = document.querySelectorAll('.table-collapse-nested');
  collapseWrappers.forEach(function (wrapper) {
    var collapseElement = wrapper.querySelector('.collapse');
    if (collapseElement.classList.contains('show')) {
      wrapper.classList.add('is-active');
    }
    collapseElement.addEventListener('show.bs.collapse', function (event) {
      event.stopPropagation();
      wrapper.classList.add('is-active');
    });
    collapseElement.addEventListener('hidden.bs.collapse', function (event) {
      event.stopPropagation();
      wrapper.classList.remove('is-active');
    });
  });
  //** (End) For Tables Collapse **//

  //** (Start) For Switch Tables **//
  function handleSwitchTable() {
    var switchTables = document.querySelectorAll('.switch-tables input[type="checkbox"]');
    var switchTablesWrapper = document.querySelector('.switch-tables-wrapper');
    var updateClasses = function updateClasses() {
      var checkedCount = document.querySelectorAll('.switch-tables input[type="checkbox"]:checked');
      var checkedCountData = checkedCount.length;
      if (checkedCountData === 1) {
        switchTablesWrapper.classList.add('is-one-coll');
        switchTablesWrapper.classList.remove('is-two-coll');
      } else if (checkedCountData > 1) {
        switchTablesWrapper.classList.add('is-two-coll');
        switchTablesWrapper.classList.remove('is-one-coll');
      } else {
        switchTablesWrapper.classList.remove('is-one-coll');
        switchTablesWrapper.classList.remove('is-two-coll');
      }
    };
    var updateTables = function updateTables(checkbox) {
      var switchTableId = checkbox.id;
      var switchTableBlock = document.querySelector("[data-switch-table=\"".concat(switchTableId, "\"]"));
      if (checkbox.checked) {
        switchTableBlock.classList.remove('d-none');
      } else {
        var otherCheckedCount = document.querySelectorAll('.switch-tables input[type="checkbox"]:checked:not(#' + switchTableId + ')');
        if (otherCheckedCount.length > 0) {
          switchTableBlock.classList.add('d-none');
        } else {
          checkbox.checked = true;
        }
      }
    };
    switchTables.forEach(function (checkbox) {
      checkbox.addEventListener('change', function () {
        updateClasses();
        updateTables(checkbox);
      });
    });
    updateClasses();
    updateTables(switchTables[0]);
  }
  var switchTables = document.querySelectorAll('.switch-tables input[type="checkbox"]');
  var switchTablesWrapper = document.querySelector('.switch-tables-wrapper');
  if (switchTables && switchTablesWrapper) {
    handleSwitchTable();
    document.addEventListener('load', handleSwitchTable);
  }
  //** (End) For Switch Tables **//

  //** (Start) For Tables Buttons **//
  var dropdownToggles = document.querySelectorAll('.dropdown-toggle');
  dropdownToggles.forEach(function (dropdownToggle) {
    dropdownToggle.addEventListener('show.bs.dropdown', function () {
      var cellButton = dropdownToggle.closest('.cell-button');
      if (cellButton) cellButton.classList.add('is-active');
    });
    dropdownToggle.addEventListener('hide.bs.dropdown', function () {
      var cellButton = dropdownToggle.closest('.cell-button');
      if (cellButton) cellButton.classList.remove('is-active');
    });
  });
  //** (End) For Tables Buttons **//

  //** (Start) Vanilla Calendar **//
  var dropdownCalendars = document.querySelectorAll('.dropdown-calendar');
  dropdownCalendars.forEach(function (dropdownCalendar) {
    var dropdownButton = dropdownCalendar.querySelector('.btn-calendar');
    var dropdownBootstrap = new bootstrap.Dropdown(dropdownButton);
    var dropdownButtonFirstDate = dropdownButton.querySelector('.first');
    var dropdownButtonSecondDate = dropdownButton.querySelector('.second');
    var vanilaCalendar = dropdownCalendar.querySelector('.vanilla-calendar');
    var vanilaCalendarMultiple = dropdownCalendar.querySelector('.vanilla-calendar--multiple');
    var defaultTemplate = "\n\t\t\t<div class=\"vanilla-calendar-header\">\n\t\t\t\t\t<div class=\"vanilla-calendar-top\">\n\t\t\t\t\t\t\t<div class=\"vanilla-calendar-tabs\">\n\t\t\t\t\t\t\t\t\t<button class=\"btn btn-calendar-tab btn-calendar-default is-active\">\u0414\u0430\u0442\u0430</button>\n\t\t\t\t\t\t\t\t\t<button class=\"btn btn-calendar-tab btn-calendar-multiple\">\u0414\u0438\u0430\u043F\u0430\u0437\u043E\u043D</button>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<span class=\"vanilla-calendar-top__selected_date\"></span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"vanilla-calendar-header__bottom\">\n\t\t\t\t\t\t\t<div class=\"vanilla-calendar-header__content\">\n\t\t\t\t\t\t\t\t\t<#Month />\n\t\t\t\t\t\t\t\t\t<#Year />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"vanilla-calendar-header__navigation\">\n\t\t\t\t\t\t\t\t\t<#ArrowPrev />\n\t\t\t\t\t\t\t\t\t<#ArrowNext />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"vanilla-calendar-wrapper\">\n\t\t\t\t\t<#WeekNumbers />\n\t\t\t\t\t<div class=\"vanilla-calendar-content\">\n\t\t\t\t\t\t\t<#Week />\n\t\t\t\t\t\t\t<#Days />\n\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"vanilla-calendar-buttons\">\n\t\t\t\t\t<button class=\"btn vanilla-calendar-buttons__close\">\u0417\u0430\u043A\u0440\u044B\u0442\u044C</button>\n\t\t\t\t\t<button class=\"btn vanilla-calendar-buttons__save\">\u041E\u043A</button>\n\t\t\t</div>\n\t\t";
    var multipleTemplate = "\n\t\t<div class=\"vanilla-calendar-grid\">\n\t\t\t<div class=\"vanilla-calendar-top\">\n\t\t\t\t<div class=\"vanilla-calendar-tabs\">\n\t\t\t\t\t<button class=\"btn btn-calendar-tab btn-calendar-default\">\u0414\u0430\u0442\u0430</button>\n\t\t\t\t\t<button class=\"btn btn-calendar-tab btn-calendar-multiple is-active\">\u0414\u0438\u0430\u043F\u0430\u0437\u043E\u043D</button>\n\t\t\t\t</div>\n\n\t\t\t\t<span class=\"vanilla-calendar-top__selected_date\"></span>\n\t\t\t</div>\n\t\t\t<#Multiple>\n\t\t\t\t<div class=\"vanilla-calendar-column\">\n\t\t\t\t\t<div class=\"vanilla-calendar-header\">\n\t\t\t\t\t\t<div class=\"vanilla-calendar-header__bottom\">\n\t\t\t\t\t\t\t<div class=\"vanilla-calendar-header__content\">\n\t\t\t\t\t\t\t\t<#Month />\n\t\t\t\t\t\t\t\t<#Year />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"vanilla-calendar-header__navigation\">\n\t\t\t\t\t\t\t\t<#ArrowPrev />\n\t\t\t\t\t\t\t\t<#ArrowNext />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"vanilla-calendar-wrapper\">\n\t\t\t\t\t\t<#WeekNumbers />\n\t\t\t\t\t\t<div class=\"vanilla-calendar-content\">\n\t\t\t\t\t\t\t<#Week />\n\t\t\t\t\t\t\t<#Days />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t<#/Multiple>\n\t\t\t<div class=\"vanilla-calendar-buttons\">\n\t\t\t\t<button class=\"btn vanilla-calendar-buttons__close\">\u0417\u0430\u043A\u0440\u044B\u0442\u044C</button>\n\t\t\t\t<button class=\"btn vanilla-calendar-buttons__save\">\u041E\u043A</button>\n\t\t\t</div>\n\t\t</div>\n\t";
    var optionsSingle = {
      type: 'default',
      settings: {
        lang: 'ru',
        visibility: {
          theme: 'light',
          weekend: false,
          daysOutside: false
        },
        selection: {
          day: 'single'
        }
      },
      actions: {
        clickDay: function clickDay(e, dates) {
          var selectedDate = calendar.HTMLElement.querySelector('.vanilla-calendar-top__selected_date');
          if (dates[1]) {
            dates.sort(function (a, b) {
              return +new Date(a) - +new Date(b);
            });
            selectedDate.textContent = "".concat(formatterForSelected(dates[0]), " - ").concat(formatterForSelected(dates[dates.length - 1]));
          } else if (dates[0]) {
            selectedDate.textContent = formatterForSelected(dates[0]);
          }
        }
      },
      DOMTemplates: {
        "default": defaultTemplate
      }
    };
    var optionsMultiple = {
      type: 'multiple',
      settings: {
        lang: 'ru',
        visibility: {
          theme: 'light',
          weekend: false,
          daysOutside: false
        },
        selection: {
          day: 'multiple-ranged'
        }
      },
      actions: {
        clickDay: function clickDay(e, dates) {
          var selectedDate = calendarMultiple.HTMLElement.querySelector('.vanilla-calendar-top__selected_date');
          if (dates[1]) {
            dates.sort(function (a, b) {
              return +new Date(a) - +new Date(b);
            });
            selectedDate.textContent = "".concat(formatterForSelected(dates[0]), " - ").concat(formatterForSelected(dates[dates.length - 1]));
          } else if (dates[0]) {
            selectedDate.textContent = formatterForSelected(dates[0]);
          }
        }
      },
      DOMTemplates: {
        multiple: multipleTemplate
      }
    };
    var calendar = new VanillaCalendar(vanilaCalendar, optionsSingle);
    var calendarMultiple = new VanillaCalendar(vanilaCalendarMultiple, optionsMultiple);
    calendar.init();
    calendarMultiple.init();
    function calendarDaysFirstLast() {
      var vanillaCalendarDays = vanilaCalendarMultiple.querySelectorAll('.vanilla-calendar-days');
      vanillaCalendarDays.forEach(function (vanillaCalendarDays) {
        var vanillaCalendarDayItems = vanillaCalendarDays.querySelectorAll('.vanilla-calendar-day');
        var firstNonEmptyIndex = -1;
        var lastNonEmptyIndex = -1;
        vanillaCalendarDayItems.forEach(function (vanillaCalendarDayItem, index) {
          if (vanillaCalendarDayItem.querySelector('.vanilla-calendar-day__btn')) {
            if (firstNonEmptyIndex === -1) {
              firstNonEmptyIndex = index;
            }
            lastNonEmptyIndex = index;
          }
        });
        if (firstNonEmptyIndex !== -1 && lastNonEmptyIndex !== -1) {
          vanillaCalendarDayItems[firstNonEmptyIndex].classList.add('vanilla-calendar-day__first');
          vanillaCalendarDayItems[lastNonEmptyIndex].classList.add('vanilla-calendar-day__last');
        }
      });
    }
    function hideCalendar() {
      dropdownCalendar.classList.remove('is-active');
      dropdownBootstrap.hide();
    }
    function formatterForButton(date) {
      var options = {
        day: '2-digit',
        month: '2-digit',
        year: '2-digit'
      };
      var formattedDate = new Date(date);
      var formattedDateString = formattedDate.toLocaleDateString('ru', options);
      var _formattedDateString$ = formattedDateString.split('.'),
        _formattedDateString$2 = _slicedToArray(_formattedDateString$, 3),
        day = _formattedDateString$2[0],
        month = _formattedDateString$2[1],
        year = _formattedDateString$2[2];
      return "".concat(day, ".").concat(month, ".").concat(year);
    }
    function formatterForSelected(date) {
      var options = {
        day: '2-digit',
        month: 'long',
        year: 'numeric'
      };
      var formattedDate = new Date(date);
      var formattedDateString = formattedDate.toLocaleDateString('ru', options);
      return formattedDateString;
    }
    function calendarToDay(_selectedDate) {
      var today = new Date();
      _selectedDate.textContent = formatterForSelected(today);
    }
    function calendarDefaultButtons() {
      vanilaCalendar.addEventListener('click', function (event) {
        if (event.target.matches('.vanilla-calendar-buttons__close')) {
          hideCalendar();
        } else if (event.target.matches('.vanilla-calendar-buttons__save')) {
          var selectedDates = calendar.selectedDates;
          var firstDate = selectedDates[0];
          var lastDate = selectedDates[selectedDates.length - 1];
          if (selectedDates.length === 1) {
            dropdownButton.classList.remove('multiple');
            dropdownButtonFirstDate.textContent = formatterForButton(firstDate);
            dropdownButtonSecondDate.textContent = '';
            hideCalendar();
          } else if (selectedDates.length > 1) {
            dropdownButton.classList.add('multiple');
            dropdownButtonFirstDate.textContent = formatterForButton(firstDate);
            dropdownButtonSecondDate.textContent = formatterForButton(lastDate);
            hideCalendar();
          }
        } else if (event.target.matches('.btn-calendar-multiple')) {
          vanilaCalendar.classList.add('d-none');
          vanilaCalendarMultiple.classList.remove('d-none');
          calendar.reset();
        }
      });
    }
    function calendarMultipleButtons() {
      vanilaCalendarMultiple.addEventListener('click', function (event) {
        if (event.target.matches('.vanilla-calendar-buttons__close')) {
          hideCalendar();
        } else if (event.target.matches('.vanilla-calendar-buttons__save')) {
          var selectedDates = calendarMultiple.selectedDates;
          var firstDate = selectedDates[0];
          var lastDate = selectedDates[selectedDates.length - 1];
          if (selectedDates.length > 1) {
            dropdownButton.classList.add('multiple');
            dropdownButtonFirstDate.textContent = formatterForButton(firstDate);
            dropdownButtonSecondDate.textContent = formatterForButton(lastDate);
            hideCalendar();
          }
        } else if (event.target.matches('.btn-calendar-default')) {
          vanilaCalendarMultiple.classList.add('d-none');
          vanilaCalendar.classList.remove('d-none');
          calendarMultiple.reset();
        }
      });
    }
    var observerConfig = {
      childList: true
    };
    if (vanilaCalendarMultiple) {
      var selectedDateMultiple = vanilaCalendarMultiple.querySelector('.vanilla-calendar-top__selected_date');
      var calendarMultipleType = calendarMultiple.currentType;
      vanilaCalendarMultiple.classList.add('d-none');
      if (calendarMultipleType === 'multiple') {
        calendarToDay(selectedDateMultiple);
        calendarMultipleButtons();
        calendarDaysFirstLast();
      }
      var observerMultipleCalendar = new MutationObserver(function (mutationsList, observer) {
        var calendarMultipleType = calendarMultiple.currentType;
        var selectedDates = calendarMultiple.selectedDates;
        var firstDate = selectedDates[0];
        var lastDate = selectedDates[selectedDates.length - 1];
        dropdownBootstrap.update();
        if (calendarMultipleType === 'multiple') {
          requestAnimationFrame(function () {
            var selectedDateMultiple = vanilaCalendarMultiple.querySelector('.vanilla-calendar-top__selected_date');
            if (selectedDates.length === 1) {
              selectedDateMultiple.textContent = formatterForSelected(firstDate);
            } else if (selectedDates.length > 1) {
              selectedDateMultiple.textContent = "".concat(formatterForSelected(firstDate), " - ").concat(formatterForSelected(lastDate));
            } else {
              calendarToDay(selectedDateMultiple);
              calendarMultipleButtons();
            }
            calendarDaysFirstLast();
          });
        }
      });
      observerMultipleCalendar.observe(vanilaCalendarMultiple, observerConfig);
    }
    if (vanilaCalendar) {
      var selectedDate = vanilaCalendar.querySelector('.vanilla-calendar-top__selected_date');
      var calendarDefaultType = calendar.currentType;
      if (calendarDefaultType === 'default') {
        calendarToDay(selectedDate);
        calendarDefaultButtons();
      }
      var observerDefaultCalendar = new MutationObserver(function (mutationsList, observer) {
        calendarDefaultType = calendar.currentType;
        var selectedDates = calendar.selectedDates;
        var firstDate = selectedDates[0];
        dropdownBootstrap.update();
        if (calendarDefaultType === 'default') {
          requestAnimationFrame(function () {
            var selectedDate = vanilaCalendar.querySelector('.vanilla-calendar-top__selected_date');
            if (selectedDates.length === 1) {
              selectedDate.textContent = formatterForSelected(firstDate);
            } else {
              calendarToDay(selectedDate);
              calendarDefaultButtons();
            }
          });
        }
      });
      observerDefaultCalendar.observe(vanilaCalendar, observerConfig);
    }
  });
  //** (End) Vanilla Calendar **//

  //** (Start) Progress Bar **//
  var progressBars = document.querySelectorAll('.progress-bar');
  if (progressBars.length > 0) {
    progressBars.forEach(function (progressBar) {
      var currentValue = parseFloat(progressBar.getAttribute('aria-valuenow'));
      var maxValue = parseFloat(progressBar.getAttribute('aria-valuemax'));
      var fillPercentage = currentValue / maxValue * 100;
      progressBar.style.width = "".concat(fillPercentage, "%");
    });
  }
  //** (End) Progress Bar **//
});
/******/ })()
;